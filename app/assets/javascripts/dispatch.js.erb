// app/assets/javascripts/dispatch.js
"use strict";

function DispatchController(rideZoneId, mapController, botDisabled) {
  this._rideZoneId = rideZoneId;
  this._mapController = mapController;
  this._botDisabled = botDisabled;
  this._activeConversationId = undefined;
  this.OVERDUE_ASSIGNMENT = 10*60*1000;
  this.OVERDUE_PICKUP = 15*60*1000;
  this.OVERDUE_COMPLETION = 30*60*1000;
  this.STILL_NEW_RIDE = 10*60*1000;

  this._statusStrings = {
      messaging: 'MESSAGING', help_needed: 'NEEDS&nbsp;HELP', scheduled: 'SCHEDULED',
      waiting_acceptance: 'WAIT&nbsp;ACCEPT',
      waiting_assignment: 'NEEDS&nbsp;DRIVER', assignment_overdue: 'OVERDUE',
      waiting_pickup: 'WAITING', pickup_overdue: 'OVERDUE', new_ride: 'NEW',
      driving: 'DRIVING', completion_overdue: 'OVERDUE', complete: 'COMPLETE'
    };

  this._statusPinURLs = {
    messaging: "<%= asset_path('rider-needs-driver.svg')%>",
    help_needed: "<%= asset_path('rider-pickup-overdue.svg')%>",
    scheduled: "<%= asset_path('rider-needs-driver.svg')%>",
    waiting_acceptance: "<%= asset_path('rider-needs-driver.svg')%>",
    waiting_assignment: "<%= asset_path('rider-needs-driver.svg')%>",
    new_ride: "<%= asset_path('rider-needs-driver.svg')%>",
    assignment_overdue: "<%= asset_path('rider-assignment-overdue.svg')%>",
    waiting_pickup: "<%= asset_path('rider-waiting-for-pickup.svg')%>",
    pickup_overdue: "<%= asset_path('rider-pickup-overdue.svg')%>",
    driving: "<%= asset_path('driver-driving.svg')%>",
    completion_overdue: "<%= asset_path('driver-overdue.svg')%>",
    complete: "<%= asset_path('driver-driving.svg')%>"
  };

  // Maps the conversation statuses to the table they should appear in
  this._tableStatuses = {
    needDriverConversations: ['help_needed', 'scheduled', 'new_ride', 'waiting_assignment', 'assignment_overdue'],
    haveDriverConversations: ['waiting_acceptance', 'waiting_pickup', 'pickup_overdue', 'driving', 'completion_overdue'],
    inactiveConversations: ['complete'],
    activeConversations: ['messaging']
  };

  this._statusClasses = [];
  for (var status in this._statusStrings) {
    this._statusClasses.push('conv-status-' + status)
  }
  this._statusStyles = {}
}

DispatchController.prototype = {

  connected: function () {
    $('.disp-server-status').text("Connected").toggleClass('disp-text-alert', false);
  },

  disconnected: function () {
    $('.disp-server-status').text("Disconnected").toggleClass('disp-text-alert', true);
  },

  toggleBotDisabled: function () {
    if( confirm("Are you sure? This will effect whether people who text for ride requests receive automatic responses. Unless there is a problem, it should stay enabled.") ) {
      var self = this;
      $.ajax('/api/1/ride_zones/' + this._rideZoneId, {
        method: 'PUT',
        data: { ride_zone: { bot_disabled: !self._botDisabled } },
        dataType: 'json',
        content_type: 'application/json',
        success: function(responseData, status, xhr) {
          self._botDisabled = responseData.bot_disabled;
          $('.disp-bot-disable').text(self._botDisabled ? 'Enable Bot' : 'Disable Bot');
        },
        error: function(xhr, status, err) { $('error_msg').text(xhr.responseText) }
      });
    }
  },

  loadRidePane: function (id) {
    var sameConvo = (id === this._activeConversationId);
    this._activeConversationId = id;
    var url = '/dispatch/' + id + '/ride_pane';
    $('#conversation-form').load( url, function( response, status, xhr ) {
      if (!sameConvo) {
        $('#msg-input').text('');
        $('#msg-input').prop('disabled',false);
        $('#msg-error-display').html('')
      }
    });
  },

  loadConversationMessages: function (id) {
    $('#conversation-messages').load('/dispatch/' + id + '/messages', function( response, status, xhr ) {
      var cont = $('.messages');
      cont[0].scrollTop = cont[0].scrollHeight;
      document.querySelector('#conv-modal').scrollIntoView();
    });
  },

  checkToggleRideCreate: function(data) {
    var from_address = data['response']['from_address'];
    var from_city = data['response']['from_city'];
    var pickup_at = data['response']['pickup_at'];

    if ( from_address===null || from_city===null || pickup_at===null ) {
      console.log('do nothing');
    } else {
      $('.show_create_ride').css('display', 'table-row');
      $('.hide_create_ride').css('display', 'none');
    }
  },

  attachInlineEditables: function() {
    var self = this;

    $('#from_address').editable({ mode: 'inline', emptytext:'address', success: function(data, config) {
      self.checkToggleRideCreate(data);
    }});

    $('#from_city').editable({ mode: 'inline', emptytext:'city', success: function(data,config) {
      self.checkToggleRideCreate(data);
    }});

    $('#to_address').editable({ mode: 'inline', emptytext:'address'});
    $('#to_city').editable({ mode: 'inline', emptytext:'city'});
    $('#additional_passengers').editable({ mode: 'inline'});
    $('#special_requests').editable({ mode: 'inline'});
  },

  attachRideCreate: function( conversation_id ) {
    $('.create_ride').click(function(e) {
      $.post( '/api/1/conversations/'+conversation_id+'/rides', function(responseData, status, xhr) {
         $('.create_ride').text( 'Created!' );
         $('.create_ride').addClass('item-highlight');

         // update status badge with current status
         console.log( 'posted to conv.create_ride, got success' ); //.conversation.ride.status)

      }).fail(function() {
        humane.log ('Address could not be found or is outside of ride zone');
      });
      e.preventDefault();
    });
  },

  attachDriverSelect: function (rzid, id, el, action) {
    if (action === undefined) {
      action = 'create';
    }

    $( el ).change( function(e) {
      if((action=='edit') && (el == '#driver_select')) {
        // if it's an edit, there's already a ride, just change the driver, on the ride object
        var url = '/api/1/ride_zones/' + rzid + '/assign_ride?driver_id=' + $(el).val() + '&ride_id=' + id;
        var msg = '';
      } else {
        // on create, copy everything over from the conversation
        var url = '/api/1/conversations/' + id + '/rides?driver_id=' + $(el).val();
        var msg = 'A new ride was created! It should appear in the \'rides\' column, and on the map.';
      }

      $.post( url, function(responseData, status, xhr) {
         var txt = $(el).find(":selected").text()
         $('.current-driver').text( txt );
         $('.current-driver').addClass('item-highlight');
      }).fail(function() {
        humane.log ('Address could not be found or is outside of ride zone.');
      });
      e.preventDefault();
    });
  },

  // If you add a new synthesized status here, you also need to
  // a) add it into the list of statuses per table in _tableStatuses
  // b) add it to _statusPinURLs
  // c) add it to one of the filters on the tables in views/dispatch/show.html.haml
  // d) add it to the _statusStrings
  // e) create a named conv-status-XX style in css
  // f) create a named conv-statdisp-XX style for the status display rectangle
  // g) see if conversationCells needs to handle the new status
  // h) check the processRide logic in dispatch_map_controller.js
  conversationStatus: function (c) {
    var ride = c.ride,
        desired_time = (ride !== undefined && ride !== null) ? new Date(ride.pickup_at*1000) : null,
        last_msg_time = new Date(c.last_message_time * 1000),
        now = Date.now(),
        status = c.status;

    if (status == 'help_needed')
      return 'help_needed';

    if (ride !== undefined && ride !== null) {
      switch (ride.status) {
        case 'complete':
        case 'canceled':
          return 'complete';
        case 'picked_up':
          if (now - desired_time > this.OVERDUE_COMPLETION)
            return 'completion_overdue';
          return 'driving';
        case 'driver_assigned':
          if (now - desired_time > this.OVERDUE_PICKUP)
            return 'pickup_overdue';
          return 'waiting_pickup';
        case 'waiting_assignment':
          if (now - new Date(ride.created_at*1000) < this.STILL_NEW_RIDE)
            return 'new_ride';
          if (now > desired_time - this.OVERDUE_ASSIGNMENT)
            return 'assignment_overdue';
          return 'waiting_assignment';
        case 'waiting_acceptance':
          return 'scheduled';
        case 'scheduled':
          if (now > desired_time)
            return 'assignment_overdue';
          return 'scheduled';
        default:
          return ride.status;
      }
    }
    if (status == 'closed')
        return 'complete';
    if (c.message_count == 0 || now - last_msg_time > 20*60*1000)
      return 'help_needed';
    return 'messaging';
  },

  // Converts a conversation status to the table ID where it should live
  tableForStatus: function(status) {
    var tableIds = Object.keys(this._tableStatuses);
    for (var i in tableIds) {
      if (this._tableStatuses[tableIds[i]].indexOf(status) != -1)
          return tableIds[i];
    }
    return undefined;
  },

  conversationCells: function (c, status) {
    var timestamp = (c.last_message_time === undefined) ? 'n/a' : strftime('%l:%M %P', new Date(c.last_message_time*1000));
    var pickup = (c.ride === undefined) ? '' : new Date(c.ride.pickup_at*1000).toISOString();
    var rideStatusChange = (c.ride === undefined) ? '' : strftime('%l:%M %P', new Date(c.ride.status_updated_at*1000));
    var msg = '(' + timestamp + ')&nbsp;' + c.last_message_body; // default to last message in conversation

    switch(status) {
      case 'scheduled':
      case 'waiting_assignment':
      case 'new_ride':
      case 'assignment_overdue':
        msg = 'Ride pickup time scheduled for ' + strftime('%l:%M %P', new Date(c.ride.pickup_at*1000));
        break;
      case 'waiting_acceptance':
        msg = 'Ride assigned to driver ' + c.ride.driver_name + ' at ' + rideStatusChange;
        break;
      case 'waiting_pickup':
        msg = 'Ride accepted by driver ' + c.ride.driver_name + ' at ' + rideStatusChange;
        break;
      case 'pickup_overdue':
        msg = 'Voter not yet picked up by driver ' + c.ride.driver_name + '. Ride was accepted at ' + rideStatusChange;
        break;
      case 'driving':
        msg = 'Voter picked up by driver ' + c.ride.driver_name + ' at ' + rideStatusChange;
        break;
      case 'completion_overdue':
        msg = 'Ride not yet completed by driver ' + c.ride.driver_name + '. Voter was picked up at ' + rideStatusChange;
        break;
      case 'complete':
        if (c.ride !== undefined) {
          if (c.ride.status == 'complete')
            msg = 'Ride completed by ' + c.ride.driver_name + ' at ' + rideStatusChange;
          else // canceled
            msg = 'Ride ' + c.ride.description
        }
        break;
    }
    var cells = '<td class="conv-voter"><div class="voter-info"><b>';
    if (c.name.length > 0) {
      cells = cells + c.name
    } else {
      cells = cells + c.from_phone
    }

    if ( typeof c.blacklisted_phone_number === 'undefined') {
      var status_text = this._statusStrings[status]
    } else {
      var status_text = '<i>BLOCKED #</i>'
    }

    cells = cells + '</b></div>' + msg.truncate(100)
    if (c.special_requests.length > 0) {
      cells = cells + ' <span class="special-requests-highlight">SR</span>'
    }
    cells = cells + '</td><td class="conv-status"><span class="conv-statdisp conv-statdisp-'+status+'">' + status_text + '</span></td>';

    if (status == 'complete' || status == 'driving') {
      cells = cells + '<td class="conv-time"></td>';
    } else {
      cells = cells + '<td class="conv-time"><time class="timeago" datetime="' + pickup + '">' + pickup + '</time> </td>';
    }
    return cells
  },

  // Adds or replaces row in the conversation table with data from conversation
  // object c. Returns the conversation's calculated status.
  updateConversationTable: function (c, opts) {
    var status = this.conversationStatus(c),
        rowId = 'conv-row-'+c.id,
        existing = $('#' + rowId),
        targetTable = this.tableForStatus(status),
        cells = this.conversationCells(c, status),
        addLastFromVoter = (status == 'help_needed' && c.last_message_sent_by == 'Voter'),
        ride_id = (c.ride !== undefined) ? c.ride.id : 0,
        row = existing;


    if (targetTable !== undefined) {
      if (existing.length > 0) {
        var existingTable = existing.parent().parent().attr('id');
        existing.html(cells);
        existing.data('ride-id', ride_id);
        existing.data('objref', c);
        if (addLastFromVoter)
          existing.addClass('conv-last-voter');
        else
          existing.removeClass('conv-last-voter');
        this.setRowStatus(existing, status);
        this.insertIntoTable(existing, targetTable);
      } else {
        var classes = "conv-row conv-status-" + status + (addLastFromVoter ? ' conv-last-voter' : ''),
            rowHtml = '<tr id="' + rowId + '" data-ride-id="' + ride_id + '" class="' + classes + '" data-cid="' + c.id + '">' + cells + '</tr>',
            newRow = $(rowHtml);
        newRow.data('objref', c);
        this.insertIntoTable(newRow, targetTable);
        row = newRow
      }
      // scope timeago to this specific row, old or new
      if (!(opts && opts.skipTimeAgo)) $(row).find("time.timeago").timeago();
      this.recalcBadges();
    }
    return status;
  },

  insertIntoTable: function(row, tableId) {
    var tableRows = $('#' + tableId + ' tr'),
        timestamp = this.rowTimestamp(row),
        self = this,
        inserted = false;
    tableRows.each(function() {
      var rowTime = self.rowTimestamp($(this));
      if (timestamp < rowTime || (tableId === "inactiveConversations" && timestamp > rowTime)) {
        row.insertBefore($(this));
        inserted = true;
        return false;
      }
    });
    if (inserted == false)
      $('#'+tableId).append(row);
  },

  rowTimestamp: function(row) {
    if (row.data('ride-id') == 0)
      return new Date(row.data('objref').last_message_time*1000);
    return new Date(row.data('objref').ride.pickup_at * 1000);
  },

  showConversationsWithStatuses: function (statusList, table) {
    var toShow = (statusList == '*') ? this._tableStatuses[table] : statusList.split(' '),
        all = this._tableStatuses[table];
    for (var i = 0; i < all.length; ++i) {
      var status = all[i],
          style = this._statusStyles[status];
      if (style !== null && style !== undefined) {
        if (toShow.indexOf(status) == -1) {
          style.visibility = 'hidden';
          style.display = 'none';
          this.visibleMapMarkersWithStatus(status, false);
        } else {
          style.visibility = 'visible';
          style.display = '';
          this.visibleMapMarkersWithStatus(status, true);
        }
      } else
        console.log("ERROR: style " + all[i] + " NOT FOUND");
    }
  },

  // Returns true if rows with 'status' are currently visible
  statusIsVisible: function(status) {
    var style = this._statusStyles[status];
    return style.visibility == 'visible';
  },

  // Sets all ride markers in the map with 'status' visible true/false
  visibleMapMarkersWithStatus: function (status, visible) {
    var self = this;
    $('.conv-row.conv-status-'+status).each(function() {
      var ride = $(this).data('objref').ride;
      if (ride !== null && ride !== undefined) {
        self._mapController.visibleRide(ride, visible);
      }
    })
  },

  animateRide: function(rideId) {
    this._mapController.animateRideId(rideId);
  },

  unanimateRide: function(rideId) {
    this._mapController.unanimateRideId(rideId);
  },

  // Counts the number of items that match the filters for each filter button
  // and updates their text to have (N) badge with count
  recalcBadges: function() {
    var self = this;
    $('.btn-conv-filter').each(function() {
      var total = 0,
          tableId = $(this).data('table'),
          statuses = $(this).data('statuses').split(' ');
      if (statuses[0] == '*') {
        total = $('#'+tableId+' .conv-row').length;
      } else {
        for (var i = 0; i < statuses.length; ++i) {
          total = total + $('#'+tableId+' .conv-status-' + statuses[i]).length;
        }
      }
      self.setTotal(this, total);
    });
    var tableIds = Object.keys(this._tableStatuses);
    for (var i in tableIds) {
      var total = $('#' + tableIds[i] + ' .conv-row').length,
          tab = $('#' + tableIds[i] + 'Tab');
      self.setTotal(tab, total);
    }
  },

  setTotal: function(node, total) {
    $(node).text($(node).text().replace(/ \(.*/, '') + ' (' + total + ')');
  },

  // Sets the conv-status-xxx status for this row object and removes all other
  // conv-status-xxx statuses from the row
  setRowStatus: function(row, rowStatus) {
    var statusClass = 'conv-status-' + rowStatus,
        classes = this._statusClasses.slice(0),
        index = classes.indexOf(statusClass);

    row.addClass(statusClass);
    classes.splice(index, 1);
    row.removeClass(classes.join(' '));
  },

  // Iterates over all conversation table rows and recomputes their status. If
  // it has changed, processes the conversation fresh.
  refreshStatuses: function() {
    var self = this;
    $('.conv-row').each(function() {
      var status = self.conversationStatus($(this).data('objref'));
      if (!$(this).hasClass('conv-status-'+status)) {
        self.processConversation($(this).data('objref'));
      }
    })
  },

  sendReply: function() {
    var submitButton = $('#msg-submit'),
        msgInput = $('#msg-input'),
        errDisplay = $('#msg-error-display'),
        args = {'message' : {'body': $('#msg-input').text()}},
        url = '/api/1/conversations/' + this._activeConversationId + '/messages';

    submitButton.text('Sending…').prop('disabled',true);
    msgInput.prop('disabled',true);
    $.ajax(url, {
      type: 'POST',
      dataType: 'json',
      data: args,
      process_data: false,
      content_type: 'application/json',
      success: function(data, textStatus, jqXHR) {
        msgInput.text('');
        errDisplay.html('');
      },
      error: function( jqXHR, textStatus, errorThrown ) {
        errDisplay.html('Your message failed to send:<br>' + jqXHR.responseJSON['error'])
      },
      complete: function() {
        submitButton.text('Send').prop('disabled',false);
        msgInput.prop('disabled',false).focus();
      }
    });
  },

  // Called for new conversation event or changed
  processConversation: function (convo, opts) {
    var status = this.updateConversationTable(convo, opts);

    // Update the from and two addresses if applicable.
    $('#from_address').editable('setValue', convo.from_address);
    $('#from_city').editable('setValue', convo.from_city);
    $('#to_address').editable('setValue', convo.to_address);
    $('#to_city').editable('setValue', convo.to_city);

    if (convo.ride != undefined) {
      this._mapController.processRide(convo.ride, this.statusIsVisible(status));
    }
  },

  // Handle new driver creation or change
  processDriver: function (driver) {
    this._mapController.processDriver(driver);
  },

  // Handle new message
  processMessage: function (msg) {
    if (msg.conversation_id == this._activeConversationId) {
      this.loadConversationMessages(this._activeConversationId);
    }
  },

  refreshConversations: function () {
    var self = this;
    $("#conversations > tbody").html("");
    $.ajax('/api/1/ride_zones/' + this._rideZoneId + '/conversations?status=all', {
      success: function(data, status, xhr) {
        for (var i = 0; i < data.response.length; ++i) {
          self.processConversation(data.response[i], { skipTimeAgo : true });
        }
        // do one bulk timeago update after the table renders
        $("time.timeago").timeago()
      },
      error: function(xhr, status, err) { $('error_msg').text(xhr.responseText) }
    });
  },

  refreshDrivers: function () {
    var self = this;
    this._mapController.clearDriverMarkers();
    $.ajax('/api/1/ride_zones/' + this._rideZoneId + '/drivers', {
      success: function(data, status, xhr) {
        for (var i = 0; i < data.response.length; ++i) {
          self.processDriver(data.response[i]);
        }
      },
      error: function(xhr, status, err) { $('error_msg').text(xhr.responseText) }
    });
  },

  eventReceived: function (event) {
    switch (event['event_type']) {
      case 'new_conversation':
        this.processConversation(event.conversation);
        break;
      case 'conversation_changed':
        this.processConversation(event.conversation);
        break;
      case 'new_driver':
        this.processDriver(event.driver);
        break;
      case 'driver_changed':
        this.processDriver(event.driver);
        break;
      case 'new_message':
        this.processMessage(event.message);
        break;
    }
  },

  init: function() {
    var statuses = Object.keys(this._statusStrings)
    this._statusStyles = getStyleRules('.conv-status-', statuses);
    this.refreshConversations();
    this.refreshDrivers();
    createRideZoneChannel(this._rideZoneId, this.connected.bind(this), this.disconnected.bind(this), this.eventReceived.bind(this));

    $('#conv-modal').one('shown.bs.modal', function () {

      $('#msg-submit').click(function() {
        dispatchController.sendReply();
        return false;
      });

      $('#msg-input').keydown(function(e){
        if(e.which == 13){
          dispatchController.sendReply();
          $('#msg-submit').prop('disabled',true);
          return false;
        }
      });
      $('#msg-input').focus();
    })
  }
};
